schema {
  query: Query
}

type MeQuery @authorize {
  user: UserQuery!
}

type PingQuery {
  default: Pong!
  database: Pong! @authorize
}

type Pong {
  message: String!
}

type Query {
  ping: PingQuery!
  me: MeQuery!
}

type UserQuery {
  id: Int!
  username: String!
  email: String!
  createdAt: DateTime!
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
  VALIDATION
}

directive @authorize("The name of the authorization policy that determines access to the annotated resource." policy: String "Roles that are allowed to access the annotated resource." roles: [String!] "Defines when when the authorize directive shall be applied.By default the authorize directives are applied during the validation phase." apply: ApplyPolicy! = BEFORE_RESOLVER) repeatable on OBJECT | FIELD_DEFINITION

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")